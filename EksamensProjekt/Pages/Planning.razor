@using Core.Models
@using Services
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using MongoDB.Bson.Serialization.Attributes;
@using MongoDB.Bson;
@page "/planning"

@* Header with save button for the planning page *@
<div class="container3">
<h1>Planlægning</h1>
<button @onclick=" ()=> SavePlanning(events,applications)" class="btn btn-primary"> Gem Plan </button>
<br/>
<br />
</div>
<div class="container">
	@*  Loop runs through incoming events and displays one of each week via if-statement *@
@foreach (var item in events)
{
	string WeekdaynoticeColor = "";
	string WeekendnoticeColor = "";
	string WeekdayWarningMessage = "";
	string WeekendWarningMessage = "";
	@if (IsAlreadyDisplayed(item.WeekNumber) != true)
	{
		int weekdayChildren = 0;
		int weekendChildren = 0;
			@*Checks the event list for items, that have the same week number as the displayed week*@
		foreach (var workdays in events.Where(e => e.WeekNumber == item.WeekNumber))
		{
			@* Loop runds through the applications imbeded in the event and adds up the children for each application *@
			foreach (var application in workdays.Applications)
			{
				if (workdays.Workdays == "Onsdag - Søndag (Hel Uge)" || workdays.Workdays == "Onsdag - Fredag (Halv Uge)")
				{
					weekdayChildren += application.Parent.Children.Count;
				}
				if (workdays.Workdays == "Lørdag - Søndag (Weekend)" || workdays.Workdays == "Onsdag - Søndag (Hel Uge)")
				{
					weekendChildren += application.Parent.Children.Count;
				}
			}
		}
		@* If-statements checks how large the number of children is and colors the displayed text accordingly *@
		if (weekdayChildren >= 15)
		{
			WeekdayWarningMessage = "";
			WeekdaynoticeColor = "orange";
		}
		if (weekendChildren >= 15)
		{
			WeekendWarningMessage = "";
			WeekendnoticeColor = "orange";
		}
		if (weekendChildren > 20)
		{
			WeekendnoticeColor = "red";
			WeekendWarningMessage = "Advarsel: Der er for mange børn tilmeldt";
		}
		if (weekdayChildren > 20)
		{
			WeekdaynoticeColor = "red";
			WeekdayWarningMessage = "Advarsel: Der er for mange børn tilmeldt";
		}

		@* HTML for the dsiplayed work week *@
		<div class="container2">
		<h1>Uge @item.WeekNumber | @item.Location</h1>
		<p>Hverdage: <p style="color: @WeekdaynoticeColor"> @weekdayChildren/20 </p></p>
		<p style="color @WeekdaynoticeColor">@WeekdayWarningMessage</p>
		<p>Weekend: <p style="color: @WeekendnoticeColor">@weekendChildren/20 </p></p>
		<p style="color @WeekendnoticeColor">@WeekendWarningMessage</p>
		<Button @onclick="()=>OpenDialog(item)" class="btn btn-primary" id="modelback">Åben</Button>
		<br />
		<br />
		</div>

	}

}
</div>
@{ weekNumbers = new();}




@* Modal Window displays the information about each week when the previous OpenDialog() button is pressed *@
<ModalDialog @ref="@addDialog1" Title="Tildeling af Børneklub ansøgninger">
	<h3>Venteliste</h3>
	<div class="scrollable-div">
		<table class="styled-table">
			<thead>
				<tr>
					<th>Forælder</th>
					<th>Prioritet1</th>
					<th>Prioritet2</th>
					<th>Antal Børn</th>
					<th></th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@{
					int i = 1;

				}
				@* Checks that there are applications to display and runs the list through a loop, to display each application seperately *@
				@if (applications != null)
				{
					@foreach (var item in applications)
					{
						<tr>
							<td>@item.Parent.ParentName</td>
							<td>Uge @item.Priority1.WeekNumber | @item.Priority1.Workdays </td>
							<td>Uge @item.Priority2.WeekNumber | @item.Priority2.Workdays</td>
							<td>@item.Parent.Children.Count</td>
							<td>
								@* Button opens modal window that displays all information about the application *@
								<button @onclick="()=>OpenModal(item)" class="btn btn-outline-secondary">Se Mere</button>
							</td>
							<td>
								@* Button selects application for moving to events *@
								<button @onclick="()=>Select(item)" class="btn btn-outline-primary">Select</button>
							</td>
						</tr>
					}
				}


			</tbody>

		</table>
	</div>
	<h3>Uge @SelectedEvent?.WeekNumber | @SelectedEvent?.Location <button @onclick=" ()=> SavePlanning(events,applications)" class="btn btn-outline-success" id="SaveButton"> Gem Plan </button> </h3>

	@* Displays alle events that correspond to the week number of the week that has been clicked *@
	@foreach (var workday in events)
	{
		if (workday.WeekNumber == SelectedEvent.WeekNumber)
		{
			int totalChildren = 0;
			foreach (var application in workday.Applications)
			{
				totalChildren += application.Parent.Children.Count;
			}

			<h4>@workday.Workdays | Børn: @totalChildren</h4>
			<div class="scrollable-div">
			<table class="styled-table">
				<thead>
					<tr>
						<th>Forælder</th>
						<th>Prioritet1</th>
						<th>Prioritet2</th>
						<th>Antal Børn</th>
						<th>Mail Sendt</th>
						<th>
								@* Button takes the selected application at adds it to this event *@
							<button @onclick="() => AddToWeek(workday.Applications)" id="button-addtoweek">Tilføj til tidspunkt</button>
						</th>
						<th></th>
						<th></th>
						<th></th>
					</tr>
				</thead>
				@* Displays the applications that are bound to this event *@
				@foreach (var item2 in workday.Applications)
				{		
					<tbody>
						<tr>
							<td>@item2.Parent.ParentName</td>
							<td>Uge @item2.Priority1.WeekNumber | @item2.Priority1.Workdays</td>
							<td>Uge @item2.Priority2.WeekNumber | @item2.Priority2.Workdays</td>
							<td>@item2.Parent.Children.Count</td>
							<td>@item2.MailSent</td>
							<td>
								<button @onclick="()=>OpenModal(item2)" class="btn btn-outline-secondary">Se Mere</button>
							</td>
							<td>
									@* Button adds the applcation back to the waitinglist *@
								<button @onclick="()=>AddToWaitingList(workday.Applications, item2)" class="btn btn-outline-danger">Fortryd</button>
							</td>
							<td>
									@* Button takes the parent email from the application and copies it to the users clipboard *@
								<button @onclick="()=>SaveToEmailClipboard(item2.Parent.ParentMail, workday, item2)" class="btn btn-outline-primary">
									Kopier Email
								</button>
							</td>
							<td>
									@* Button takes the information from the event and application and generates an email, that is then copied to the users clipboard *@
									<button @onclick="()=>SaveGeneratedMailToClipboard(item2.Parent, workday, item2)" class="btn btn-outline-primary"> Generer mail</button>
							</td>

						</tr>

					</tbody>
				}
			</table>
			</div>
		}

	}


</ModalDialog>

@* Modal window shows all the attributes for a specific application *@
<ModalDialog @ref="@addDialog" Title="See more details">
	<h1>Ansøgning</h1>
	<p>Forældre: @SelectedApplication.Parent.ParentName</p>
	<p>Forældre Email: @SelectedApplication.Parent.ParentMail</p>
	<p>Forældre Telefon: @SelectedApplication.Parent.ParentPhone</p>
	<p>KræwNr.: @SelectedApplication.Parent.KræwNumber</p>
	<p>Indsendelsesdato: @SelectedApplication.SubmitDate</p>
	<p>1. Prioritet: Uge @SelectedApplication.Priority1.WeekNumber</p>
	<p>2. Prioritet: Uge @SelectedApplication.Priority2.WeekNumber</p>
	<p>På Venteliste: @SelectedApplication.IsOnWaitingList</p>
	<p>Verified: @SelectedApplication.Verified</p>
	@{
		int i = 1;
	}

	@foreach (var child in SelectedApplication.Parent.Children)
	{
		<h1>@i. Barn</h1>
		<p>Navn: @child.ChildName</p>
		<p>Alder: @child.ChildAge</p>
		<p>T-shirt str: @child.TshirtSize</p>
		<p>Kommentar: @child.Comment</p>
		<p>Allegener: @child.Allergies</p>
		<p>Været her før?: @child.BeenHereBefore</p>
		<p>Interesser: @child.Interests</p>
		i++;
	}

</ModalDialog>


@* Script used in the process of copying to clipboard in various other functions *@
<script>
	function copyToClipboard(text) {
		navigator.clipboard.writeText(text).then(function () {
			console.log('Successfully copied to clipboard');
		}, function (err) {
			console.error('Failed to copy text: ', err);
		});
	}																																															2
</script>


@code {
	// List used to keep track of wich weeks have been displayed
	private List<int> weekNumbers = new();

	// Waiting list for applications
	private List<Application>? applications = new();

	private static List<Event>? events = new();

	// Used to check level of admin priviliges
	private string adminLevel;

	// Used in the selection and moving of applications from waitinglist to events
	private Application? SelectedApplication = new Application();

	private string Emails;

	private string GeneratedMail;


	private bool methodOneCalled = false;

	private bool methodtwoCalled = false;


	// The event that is selected
	private Event? SelectedEvent = new Event();

	// Injection of the serviceclass, makes it possible to call methods that get and post to the database
	[Inject]
	private IServiceClass? mService { get; set; }

	// Adds the modal dialog functionallity to the page
	private ModalDialog? addDialog { get; set; }
	private ModalDialog? addDialog1 { get; set; }


	/*
	 * Function called when the modal window for a selected week is opened. 
	 * It updates the selected event to the given event, so the correct week number is displayed in the modal window
	 */ 
	public void setSelectedEvent(Event Event)
	{
		SelectedEvent = Event;
	}

	
    // Function used to update the selected application, so that it may be moved around to the desired event
	 
	public void SetSelectedApplication(Application application)
	{
		SelectedApplication = application;
	}

	// Function used to open the "se mere" modal window that displays all information about the given application
	public void OpenModal(Application application)
	{
		addDialog.Open();
		SetSelectedApplication(application);
	}

	// Function used to open the modal window for a specific week. Here the selected event is updated
	public void OpenDialog(Event Event)
	{
		addDialog1.Open();
		setSelectedEvent(Event);
	}

	// Assigns the give application to selected application
	public void Select(Application application)
	{
		SelectedApplication = application;
		Console.WriteLine($"{application.Parent.ParentName} selected");
	}

	public void AddToWeek(List<Application> list)
	{
		if (adminLevel == "Admin")
		{
			if (SelectedApplication.Parent.ParentMail != null)
			{
				//weekNumbers = new();
				list.Add(SelectedApplication);
				applications = applications.Where(app => app != SelectedApplication).ToList();
				SelectedApplication = new();
			}
			else
			{
				return;
			}

		}
		else
		{
			Console.WriteLine("You are not authorized to edit the page");
		}


	}

	public void AddToWaitingList(List<Application> weekList, Application application)
	{
		if (adminLevel == "Admin")
		{
			applications.Add(application);
			weekList.Remove(application);
		}
		else
		{
			Console.WriteLine("You're not authorized to make changes");
		}


	}

	protected override async Task OnInitializedAsync()
	{

		applications = (await mService.GetAllApplications()).ToList();

		adminLevel = await localStorage.GetItemAsStringAsync("adminLevel");
		Console.WriteLine(adminLevel);

		foreach (var item in applications)
		{
			Console.WriteLine($"{item.ApplicationID}, {item.Id}");
		}


		events = (await mService.GetAllEvents()).ToList();

		

	}

	public async Task SaveGeneratedMailToClipboard(Parent parent, Event Event, Application application)
	{
		if (parent != null && Event != null)
		{
			var children = parent.Children;
			if (children.Count > 0) // Ensure there is at least one child
			{
				string GeneratedMail = GenerateMailContent(parent, Event);
				await JS.InvokeVoidAsync("copyToClipboard", GeneratedMail);
				Console.WriteLine("Mail content copied to clipboard");
				methodOneCalled = true;
				await UpdateMailSentStatus(Event, application);
			}
			else
			{
				Console.WriteLine("No children found for the selected application.");
			}
		}
		else
		{
			Console.WriteLine("SelectedApplication or SelectedEvent is null");
		}
		weekNumbers = new();
	}


	private string GenerateMailContent(Parent parent, Event Event)
	{

		var children = parent.Children;

		if (children.Count >= 2)
		{
			return $"Kære {parent.ParentName}\n\n" +
							$"Dette er mailen som bekræfter at {children[0].ChildName} og {children[1].ChildName} er tilmeldt perioden {Event.Workdays} i uge {Event.WeekNumber}.\n\n" +
							$"Jeg håber I får en kanon-god oplevelse på Cirkus Summarum. Håber I har nogle børn der glæder sig rigtigt meget\n\n" +
							$"{Event.FacebookGroup}\n\n" +
							$"(Husk at melde jer ind i gruppen, da videre kommunikationen kommer derigennem)\n\n" +
							"Vi glæder os til at se jer på Cirkus Summarum\n\n" +
							"Med venlig hilsen";
		}
		else if (children.Count >= 1)
		{
			return $"Kære {parent.ParentName}\n\n" +
							$"Dette er mailen som bekræfter at {children[0].ChildName} er tilmeldt perioden {Event.Workdays} i uge {Event.WeekNumber}.\n\n" +
							$"Jeg håber I får en kanon-god oplevelse på Cirkus Summarum. Håber I har nogle børn der glæder sig rigtigt meget\n\n" +
							$"{Event.FacebookGroup}\n\n" +
							$"(Husk at melde jer ind i gruppen, da videre kommunikationen kommer derigennem)\n\n" +
							"Vi glæder os til at se jer på Cirkus Summarum\n\n" +
							"Med venlig hilsen" +
							"Team Cirkus Summarum";

		}
		else
		{
			// Handle cases where there are no children in the list
			return $"Kære {parent.ParentName}\n\n" +
							$"Dette er mailen som bekræfter at du er tilmeldt perioden {Event.Workdays} i uge {Event.WeekNumber}.\n\n" +
							$"Jeg håber I får en kanon-god oplevelse på Cirkus Summarum. Håber I har nogle børn der glæder sig rigtigt meget\n\n" +
							$"{Event.FacebookGroup}\n\n" +
							$"(Husk at melde jer ind i gruppen, da videre kommunikationen kommer derigennem)\n\n" +
							"Vi glæder os til at se jer på Cirkus Summarum\n\n" +
							"Med venlig hilsen";
		}
	}



	public async Task SaveToEmailClipboard(string email, Event Event, Application application)
	{
		if (!string.IsNullOrWhiteSpace(email))
		{
			await JS.InvokeVoidAsync("copyToClipboard", email);
			methodtwoCalled = true;
			await UpdateMailSentStatus(Event, application);
		}
	}


	public async Task UpdateMailSentStatus(Event Event, Application application)
	{
		if (methodOneCalled == true && methodtwoCalled == true)
		{
			foreach(var App in Event.Applications)
			{
				if (App.ApplicationID == application.ApplicationID)
				{
					App.MailSent = true;
				}
			}
			await mService.UpdateEvent(Event);
			Console.WriteLine("Mail sent status updated");
			methodOneCalled = false;
			methodtwoCalled = false;
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Mail sent status not updated");
		}
    }


	public void SavePlanning(List<Event> EventList, List<Application> applications)
	{
		SaveWaitingList(applications);
		SaveEvents(EventList);


	}

	public void SaveEvents(List<Event> EventList)
	{


		foreach (var item in EventList)
		{

			Console.WriteLine(item.Applications.Count);
			mService.UpdateEvent(item);
		}

	}

	public async void SaveWaitingList(List<Application> applications)
	{
		List<Application> templist = new();
		templist = (await mService.GetAllApplications()).ToList();
		DeleteAll(templist);
		if (applications != null)
		{
			foreach (var item in applications)
			{
				mService.AddApplication(item);
			}
		}

	}

	public void DeleteAll(List<Application> listToRemove)
	{
		foreach (var item in listToRemove)
		{
			mService.DeleteApplicationByID(item.ApplicationID);
		}
	}

	public bool IsAlreadyDisplayed(int weekNumber)
	{
		foreach (var item in weekNumbers)
		{
			if (item == weekNumber)
			{
				return true;
			}
		}
		weekNumbers.Add(weekNumber);
		return false;
	}
}
