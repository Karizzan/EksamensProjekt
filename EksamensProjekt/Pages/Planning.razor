@using Core.Models
@using Services
@inject IJSRuntime JS
@using MongoDB.Bson.Serialization.Attributes;
@using MongoDB.Bson;
@page "/planning"


<h1>Plan</h1>
<button @onclick=" ()=> SavePlanning(events,applications)" class="btn btn-primary"> Gem Plan </button>
<br/>
<br />
@foreach (var item in events)
{
	string WeekdaynoticeColor = "";
	string WeekendnoticeColor = "";
	string WeekdayWarningMessage = "";
	string WeekendWarningMessage = "";
	@if (IsAlreadyDisplayed(item.WeekNumber) != true)
	{
		int weekdayChildren = 0;
		int weekendChildren = 0;
		foreach (var workdays in events.Where(e => e.WeekNumber == item.WeekNumber))
		{
			foreach (var application in workdays.Applications)
			{
				if (workdays.Workdays == "Onsdag - Søndag (Hel Uge)" || workdays.Workdays == "Onsdag - Fredag (Halv Uge)")
				{
					weekdayChildren += application.Parent.Children.Count;
				}
				if (workdays.Workdays == "Lørdag - Søndag (Weekend)" || workdays.Workdays == "Onsdag - Søndag (Hel Uge)")
				{
					weekendChildren += application.Parent.Children.Count;
				}
			}
		}
		if (weekdayChildren >= 15)
		{
			WeekdayWarningMessage = "";
			WeekdaynoticeColor = "orange";
		}
		if (weekendChildren >= 15)
		{
			WeekendWarningMessage = "";
			WeekendnoticeColor = "orange";
		}
		if (weekendChildren > 20)
		{
			WeekendnoticeColor = "red";
			WeekendWarningMessage = "Advarsel: Der er for mange børn tilmeldt";
		}
		if (weekdayChildren > 20)
		{
			WeekdaynoticeColor = "red";
			WeekdayWarningMessage = "Advarsel: Der er for mange børn tilmeldt";
		}


		<h1>Uge @item.WeekNumber | @item.Location</h1>
		<p>Hverdage: <p style="color: @WeekdaynoticeColor"> @weekdayChildren/20 </p></p>
		<p style="color @WeekdaynoticeColor">@WeekdayWarningMessage</p>

		<p>Weekend: <p style="color: @WeekendnoticeColor">@weekendChildren/20 </p></p>
		<p style="color @WeekendnoticeColor">@WeekendWarningMessage</p>

		<Button @onclick="()=>OpenDialog(item)" class="btn btn-primary" id="modelback">Åben</Button>
		<br />
		<br />

	}
}



@foreach (var item in events)
{

	int weeknumbers = item.WeekNumber;
}

<ModalDialog @ref="@addDialog1" Title="See more details">
	<h3>Venteliste</h3>
	<div class="scrollable-div">
		<table class="styled-table">
			<thead>
				<tr>
					<th>Prioritet1</th>
					<th>Prioritet2</th>
					<th>Forældre</th>
					<th>Antal Børn</th>
					<th></th>

				</tr>
			</thead>
			<tbody>
				@{
					int i = 1;

				}
				@if (applications != null)
				{
					@foreach (var item in applications)
					{
						<tr>
							<td>Uge @item.Priority1.WeekNumber </td>
							<td>Uge @item.Priority2.WeekNumber </td>
							<td>@item.Parent.ParentName</td>
							<td>@item.Parent.Children.Count</td>
							<td>
								<button @onclick="()=>OpenModal(item)" class="btn btn-info">Se Mere</button>
							</td>
							<td>
								<button @onclick="()=>Select(item)" class="btn btn-primary">Select</button>
							</td>
						</tr>
					}
				}


			</tbody>

		</table>
	</div>
	<h3>Uge @SelectedEvent?.WeekNumber | @SelectedEvent?.Location <button @onclick=" ()=> SavePlanning(events,applications)" class="btn btn-primary" id="SaveButton"> Gem Plan </button> </h3>


	@foreach (var workday in events)
	{
		if (workday.WeekNumber == SelectedEvent.WeekNumber)
		{
			int totalChildren = 0;
			foreach (var application in workday.Applications)
			{
				totalChildren += application.Parent.Children.Count;
			}

			<h4>@workday.Workdays | Børn: @totalChildren</h4>
			<div class="scrollable-div">
			<table class="styled-table">
				<thead>
					<tr>
						<th>Prioritet1</th>
						<th>Prioritet2</th>
						<th>Forældre</th>
						<th>Antal Børn</th>
						<th>
							<button @onclick="() => AddToWeek(workday.Applications)" id="button-addtoweek">Tilføj til tidspunkt</button>
						</th>
					</tr>
				</thead>
				@foreach (var item2 in workday.Applications)
				{


					
					<tbody>
						<tr>
							<td>Uge @item2.Priority1.WeekNumber</td>
							<td>Uge @item2.Priority2.WeekNumber</td>
							<td>@item2.Parent.ParentName</td>
							<td>@item2.Parent.Children.Count</td>
							<td>
								<button @onclick="()=>OpenModal(item2)" class="btn btn-info" id="modelfront">Se Mere</button>
							</td>
							<td>
								<button @onclick="()=>AddToWaitingList(workday.Applications, item2)" class="btn btn-outline-danger">Fortryd</button>
							</td>
							<td>
								<button @onclick="()=>SaveToEmailClipboard(item2.Parent.ParentMail)" class="btn btn-outline-primary">
									Kopier mailadresse
								</button>
							</td>

						</tr>

					</tbody>
				}
			</table>
			</div>
		}

	}


</ModalDialog>

<ModalDialog @ref="@addDialog" Title="See more details">
	<h1>Ansøgning</h1>
	<p>Forældre: @SelectedApplication.Parent.ParentName</p>
	<p>Forældre Email: @SelectedApplication.Parent.ParentMail</p>
	<p>Forældre Telefon: @SelectedApplication.Parent.ParentPhone</p>
	<p>KræwNr.: @SelectedApplication.Parent.KræwNumber</p>
	<p>Indsendelsesdato: @SelectedApplication.SubmitDate</p>
	<p>1. Prioritet: Uge @SelectedApplication.Priority1.WeekNumber</p>
	<p>2. Prioritet: Uge @SelectedApplication.Priority2.WeekNumber</p>
	<p>På Venteliste: @SelectedApplication.IsOnWaitingList</p>
	<p>Verified: @SelectedApplication.Verified</p>
	@{
		int i = 1;
	}

	@foreach (var child in SelectedApplication.Parent.Children)
	{
		<h1>@i. Barn</h1>
		<p>Navn: @child.ChildName</p>
		<p>Alder: @child.ChildAge</p>
		<p>T-shirt str: @child.TshirtSize</p>
		<p>Kommentar: @child.Comment</p>
		<p>Allegener: @child.Allergies</p>
		<p>Været her før?: @child.BeenHereBefore</p>
		<p>Interesser: @child.Interests</p>
		i++;
	}

</ModalDialog>



<script>
	function copyToClipboard(text) {
		navigator.clipboard.writeText(text).then(function () {
			console.log('Successfully copied to clipboard');
		}, function (err) {
			console.error('Failed to copy text: ', err);
		});
	}
</script>

<style>
	/* General table styling */
	.styled-table 
	{
		border-collapse: collapse;
		width: 100%;
		margin: 0px 0px 15px;
		font-size: 15px;
		font-family: 'Arial', sans-serif;
		text-align: left;
	}

		/* Table headers */
		.styled-table th 
		{
			background-color: #d72631; /* Red color from the logo */
			color: #ffffff;
			text-align: left;
			padding: 4px 20px;
		}

		/* Table rows */
		.styled-table td 
		{
			padding: 1px 20px;
			border: 1px solid #dddddd;
		}

		/* Alternating row colors */
		.styled-table tr:nth-of-type(even) 
		{
			background-color: #f9f3f3; /* Light pink color */
		}

		/* Hover effect */
		.styled-table tr:hover 
		{
			background-color: #f1e1e1; /* Slightly darker pink */
		}

	/* Button styling */
	.styled-button 
	{
		background-color: #d72631; /* Red color from the logo */
		color: white;
		border: none;
		padding: 4px 16px;
		cursor: pointer;
		font-size: 12px;
		border-radius: 5px;
		transition: background-color 0.3s ease, transform 0.1s ease, box-shadow 0.1s ease;
		margin: 5px 0;
	}

		/* Button hover effect */
		.styled-button:hover 
		{
			background-color: #e53958; /* Pink color from the logo */
		}

		/* Button active effect */
		.styled-button:active 
		{
			background-color: #c01e28; /* Darker red to indicate active state */
			transform: scale(0.95); /* More noticeable shrink to indicate press */
			box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125); /* Inset shadow to create pressed effect */
		}

		/* Button focus effect */
		.styled-button:focus 
		{
			outline: none;
			box-shadow: 0 0 0 3px rgba(215, 38, 49, 0.5); /* Add a pink outline */
		}

	/* Ensure buttons in table cells fill the cell */
	.styled-table td .styled-button 
	{
		width: 100%;
		box-sizing: border-box;
	}

	.table-table 
	{
		display: grid;
		gap: 10px;
		padding: 10px;
	}

	#modelfront 
	{
		z-index: 500;
		position: relative
	}

	#modelback 
	{
		z-index: 400;
		position: relative
	}

	.scrollable-div 
	{
		overflow: auto;
		max-height: 14vh;
	}

    .modal-dialog 
	{
        overflow: auto;
        max-height: 94vh; /* Adjust this value as needed */
    }

	#button-addtoweek
	{
		border-radius: 4px;
		background-color: white;
		font-size: 13px;
		border: 1px solid black;
		margin: 0px;
		padding: 0px;
	}

	#SaveButton
	{
		margin-left: 10px;
		font-size: 15px;
		padding: 5px;
	}
</style>
@code {
	private List<int> weekNumbers = new();
	private List<Application>? applications = new();
	private static List<Event>? events = new();
	private Dictionary<string, string> copyButtonStatus = new();

	private List<Application>? applications1 = new List<Application>();

	private Application? SelectedApplication = new Application();

	private List<Application>[] AppArray = new List<Application>[12];
	private List<List<Application>> AppList = new();

	private string Emails;


	private Event? SelectedEvent = new Event();

	[Inject]
	private IServiceClass? mService { get; set; }
	private ModalDialog? addDialog { get; set; }
	private ModalDialog? addDialog1 { get; set; }



	public void setSelectedEvent(Event Event)
	{
		SelectedEvent = Event;
	}

	public void SetSelectedApplication(Application application)
	{
		SelectedApplication = application;
	}

	public void OpenModal(Application application)
	{
		weekNumbers = new();
		addDialog.Open();
		SetSelectedApplication(application);
	}

	public void OpenDialog(Event Event)
	{
		weekNumbers = new();
		addDialog1.Open();
		setSelectedEvent(Event);
	}

	public void Select(Application application)
	{
		weekNumbers = new();
		SelectedApplication = application;
		Console.WriteLine($"{application.Parent.ParentName} selected");
	}

	public void AddToWeek(List<Application> list)
	{
		if (SelectedApplication.Parent.ParentMail != null)
		{
			weekNumbers = new();
			list.Add(SelectedApplication);
			applications = applications.Where(app => app != SelectedApplication).ToList();
			SelectedApplication = new();
		}
		else
		{
			weekNumbers = new();
		}


	}

	public void AddToWaitingList(List<Application> weekList, Application application)
	{
		weekNumbers = new();
		applications.Add(application);
		weekList.Remove(application);

	}

	protected override async Task OnInitializedAsync()
	{

		applications = (await mService.GetAllApplications()).ToList();

		foreach (var item in applications)
		{
			Console.WriteLine($"{item.ApplicationID}, {item.Id}");
		}


		events = (await mService.GetAllEvents()).ToList();

		AppArray = new List<Application>[events.Count];

		for (int i = 0; i < AppArray.Length; i++)
		{
			AppArray[i] = new();
		}
		foreach (var evt in events)
		{
			copyButtonStatus[evt.Workdays] = "Få emails";
		}

		weekNumbers = new();
	}


	public async Task SaveToEmailClipboard(string email)
	{
		if (!string.IsNullOrWhiteSpace(email))
		{
			await JS.InvokeVoidAsync("copyToClipboard", email);
		}
		weekNumbers = new();
	}




	public void SavePlanning(List<Event> EventList, List<Application> applications)
	{
		SaveWaitingList(applications);
		SaveEvents(EventList);


		weekNumbers = new();
	}

	public void SaveEvents(List<Event> EventList)
	{

		foreach (var item in EventList)
		{

			Console.WriteLine(item.Applications.Count);
			mService.UpdateEvent(item);
		}

		weekNumbers = new();
	}

	public async void SaveWaitingList(List<Application> applications)
	{
		List<Application> templist = new();
		templist = (await mService.GetAllApplications()).ToList();
		DeleteAll(templist);
		if (applications != null)
		{
			foreach (var item in applications)
			{
				mService.AddApplication(item);
			}
		}

		weekNumbers = new();
	}

	public void DeleteAll(List<Application> listToRemove)
	{
		foreach (var item in listToRemove)
		{
			mService.DeleteApplicationByID(item.ApplicationID);
		}
	}

	public bool IsAlreadyDisplayed(int weekNumber)
	{
		foreach (var item in weekNumbers)
		{
			if (item == weekNumber)
			{
				return true;
			}
		}
		weekNumbers.Add(weekNumber);
		return false;

	}

}
