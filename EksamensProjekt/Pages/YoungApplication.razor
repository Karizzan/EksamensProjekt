@page "/youngApplication"


@inject NavigationManager navManager
@inject IJSRuntime js
@inject IServiceClass service

@using Services
@using Core.Models
@using Blazorise.SignaturePad
@using Blazorise
@using Blazorise.Bootstrap

<h1 class="mb-3 mt-3">Ansøg som ung frivillig</h1>

@if (isSubmitted)
{
    <p>Application submitted successfully!</p>
}
else
{
    //We create a form for the user to fill out
    //We use the EditForm component to create a form
    //We bind the form to the application object
    //We use the OnValidSubmit event to call the SubmitForm method when the form is submitted
    //We use the DataAnnotationsValidator component to validate the form
<EditForm Model="@application" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

     @* This is one of the inputfield of the form. They all look a like, but some take string, int or a bool *@
    <div class="form-group">
        <label for="AParentName">Forældre navn</label>
        <input type="text" class="form-control" @bind="application.AParentName" id="AParentName" placeholder="f.eks. Gunnar eller Inge">
    </div>
    <div class="form-group">
        <label for="APhoneNr">Telefonnr på forældre</label>
        <input type="text" class="form-control" @bind="application.AParentPhoneNr" id="APhoneNr" placeholder="+4512345678">
    </div>
    <div class="form-group">
        <label for="AParentMail">Forældre email</label>
        <input type="email" class="form-control" @bind="application.AParentMail" id="AParentMail" placeholder="f.eks. ane@gmail.com">
    </div>
    <div class="form-group">
        <label for="AName">Navn</label>
        <input type="text" class="form-control" @bind="application.AName" id="AName" placeholder="f.eks. Alex eller Marie">
    </div>
    <div class="form-group">
        <label for="AMail">Email</label>
        <input type="email" class="form-control" @bind="application.AMail" id="AMail" placeholder="f.eks. Alex@gmail.com">
    </div>
    <div class="form-group">
        <label for="KræwNr">Kræw Nummer</label>
        <input type="text" class="form-control" @bind="application.KræwNr" id="KræwNr" placeholder="Find KræwNr. på kræwet.dk ved at loggeind">
    </div>
    <div class="form-group form-check">
        <input type="checkbox" class="form-check-input" @bind="application.Declaration" id="Declaration">
        <label class="form-check-label" for="Declaration">Samtykke </label>
        <p>Ved at trykke "Samtykke" bekræfter jeg, at mit barn må være frivillig.</p>
    </div>

     @* This is the inputfield for the image of the signature *@   
    <div class="form-group">
        <label for="ImageUpload">Upload billede af underskrift</label>
        <InputFile OnChange="HandleSelectedImage" id="ImageUpload" />
    </div>

    @*This is the submit button*@
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
}




@code
{
    //We inject the service class
    [Inject]
    private IServiceClass mservice { get; set; }
    private Core.Models.YoungApplication application = new Core.Models.YoungApplication();
    private bool isSubmitted = false;

    //This method is called when the user selects an image
    private async Task HandleSelectedImage(InputFileChangeEventArgs e)
    {
        //We get the file from the event args
        var file = e.File;
        //If the file is not null
        if (file != null)
        {
            //We create a memory stream
            using (var stream = new MemoryStream())
            {
                //We copy the file to the memory stream
                await file.OpenReadStream().CopyToAsync(stream);
                application.ImageData = stream.ToArray();
            }
        }
    }



    //This method is called when the form is submitted
    private async Task SubmitForm()
    {

        //We send it to the database
        await mservice.AddYoungApplication(application);
        isSubmitted = true;
        Console.WriteLine("Form submitted successfully.");



    }

}