@using Core.Models
@page "/adminLoginPage"
@using Services
@inject NavigationManager navManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@*Hej Hudz*@
<h1>Admin Login</h1>

@*It checks if the user is loggedin and if its not, then it displays the login screen*@
@if (isLoggedIn == false)
{
    <form @onsubmit="Login">
        <div class="form-group">
            <label for="username">Username</label>
            <input type="text" id="username" @bind="admin.Username" class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" @bind="admin.Password" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
}
@*If the user is logged in, then it displays the logout button*@
@if (isLoggedIn == true)
{
    <button @onclick="ClearStorage" class="col-12 mb-3">Log ud</button>

}

@*If the username and password is not matching in the database it displays the errormessage*@
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red">@errorMessage</p>
}




@code {
    [Inject]
    private IServiceClass? mService { get; set; }

    //The admin object
    private Admin admin = new Admin();

    //The error message
    private string errorMessage;

    //The list of all admins
    List<Admin> listOfAdmins = new();

    //The boolean that checks if the user is logged in
    private bool isLoggedIn = false;


    private bool login;
    private string adminLevel;

    //This is the method that gets all the admins and it also checks if the user is logged in and what adminlevel the user has
    protected override async Task OnInitializedAsync()
    {
        listOfAdmins = (await mService.GetAllAdmins()).ToList();

        isLoggedIn = await localStorage.GetItemAsync<bool>("isLoggedIn");

        adminLevel = await localStorage.GetItemAsStringAsync("adminLevel");


        Console.WriteLine($"AdminLevel retrieved from local storage: {adminLevel}");


    }

    //This is the method that saves the item in the local storage
    private async Task Save(string key, string item)
    {
        await localStorage.SetItemAsStringAsync(key, item);

    }

    //This is the method that saves the logged in boolean in the local storage and the adminlevel aswell as the username
    private async Task saveloggedIn()
    {
        await localStorage.SetItemAsync<bool>("isLoggedIn", isLoggedIn);
        await localStorage.SetItemAsStringAsync("adminLevel", admin.AdminLevel);
        await localStorage.SetItemAsStringAsync("user", admin.Username);


    }

    //This is the method that checks if the login is correct
    private bool checkLogin(Admin logInUser)
    {
        //It goes through all the admins
        foreach (var admin in listOfAdmins)
        {
            //It checks if the username and password is correct
            if (admin.Username == logInUser.Username && admin.Password == logInUser.Password)
            {
                Console.WriteLine("Log In Successful");
                isLoggedIn = true;

                Console.WriteLine($"Admin er {admin.Username} kode: {admin.Password} og adgangniveau er {admin.AdminLevel}");
                logInUser.AdminLevel = admin.AdminLevel;
                return true;

            }

        }
        Console.WriteLine();
        return false;
    }

    //This is the method that refreshes the page
    private void RefreshPage()
    {
        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }


    //This is the method that clears the local storage
    protected async Task ClearStorage()
    {
        await localStorage.ClearAsync();
        navManager.NavigateTo("adminLoginPage", true);
        RefreshPage();
    }


    //This is the method that logs the user in
    private async Task Login()
    {

        errorMessage = null;
        // Check if username and password are provided
        if (string.IsNullOrEmpty(admin.Username) || string.IsNullOrEmpty(admin.Password))
        {
            errorMessage = "Please enter username and password.";
            return;
        }
        // Check if the login is correct
        if (checkLogin(admin) == true)
        {
            Console.WriteLine($"Brugeren er {admin.Username} og adgangniveau er {admin.AdminLevel}");
            errorMessage = "Bruger logget ind";

            await Save("user", admin.Username);

            await Save("adminLevel", admin.AdminLevel);

            await saveloggedIn();
            Console.WriteLine($"Admin efter localstorage: {adminLevel}");
            Console.WriteLine(isLoggedIn);
            RefreshPage();


        }
        else
        {
            errorMessage = "Forkert Brugernavn eller Kodeord";
        }



        
    }
}


